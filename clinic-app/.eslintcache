[{"C:\\play_area\\ClinicApplication\\clinic-app\\src\\index.js":"1","C:\\play_area\\ClinicApplication\\clinic-app\\src\\reportWebVitals.js":"2","C:\\play_area\\ClinicApplication\\clinic-app\\src\\App.js":"3","C:\\play_area\\ClinicApplication\\clinic-app\\src\\components\\HomePage.js":"4","C:\\play_area\\ClinicApplication\\clinic-app\\src\\components\\patients\\Patients.js":"5","C:\\play_area\\ClinicApplication\\clinic-app\\src\\components\\Constants.js":"6","C:\\play_area\\ClinicApplication\\clinic-app\\src\\components\\patients\\Profile.js":"7","C:\\play_area\\ClinicApplication\\clinic-app\\src\\components\\physicians\\PhysicianProfile.js":"8","C:\\play_area\\ClinicApplication\\clinic-app\\src\\components\\physicians\\Physicians.js":"9","C:\\play_area\\ClinicApplication\\clinic-app\\src\\components\\visits\\VisitProfile.js":"10","C:\\play_area\\ClinicApplication\\clinic-app\\src\\components\\visits\\Visits.js":"11"},{"size":500,"mtime":499162500000,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":149,"mtime":1610771515067,"results":"15","hashOfConfig":"13"},{"size":747,"mtime":1610792149191,"results":"16","hashOfConfig":"13"},{"size":11799,"mtime":1610948736031,"results":"17","hashOfConfig":"13"},{"size":52,"mtime":1610946518696,"results":"18","hashOfConfig":"13"},{"size":7316,"mtime":1610899055816,"results":"19","hashOfConfig":"13"},{"size":6966,"mtime":1610895726297,"results":"20","hashOfConfig":"13"},{"size":9657,"mtime":1610947838584,"results":"21","hashOfConfig":"13"},{"size":7256,"mtime":1610896198406,"results":"22","hashOfConfig":"13"},{"size":14815,"mtime":1610947838604,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1epwe24",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"26"},"C:\\play_area\\ClinicApplication\\clinic-app\\src\\index.js",[],["51","52"],"C:\\play_area\\ClinicApplication\\clinic-app\\src\\reportWebVitals.js",[],"C:\\play_area\\ClinicApplication\\clinic-app\\src\\App.js",[],"C:\\play_area\\ClinicApplication\\clinic-app\\src\\components\\HomePage.js",[],"C:\\play_area\\ClinicApplication\\clinic-app\\src\\components\\patients\\Patients.js",["53"],"C:\\play_area\\ClinicApplication\\clinic-app\\src\\components\\Constants.js",[],"C:\\play_area\\ClinicApplication\\clinic-app\\src\\components\\patients\\Profile.js",["54","55","56"],"import React,{ useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport SecurityIcon from \"@material-ui/icons/Security\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport {navigate} from \"@reach/router\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport EdiText from 'react-editext';\r\nimport {backendUrl} from \"../Constants\";\r\n\r\n\r\n\r\nconst Profile = props => {\r\n\r\n    const classes = useStyles();\r\n    const [id, setId] = useState('');\r\n    const [patient, setPatient] = useState(null);\r\n    const [patientExist, setPatientExist] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const onChangeHandler = event => {\r\n        const { name, value } = event.currentTarget;\r\n        if (name === \"id\") {\r\n            setId(value);\r\n        }\r\n    };\r\n    const onclickMethodTabs = (event,tab) => {\r\n        console.log(\"Navigating to\"+tab)\r\n        event.preventDefault();\r\n        getNavigationTabs(tab);\r\n\r\n    };\r\n\r\n    const buttonOnclickMethod = async (event) => {\r\n        event.preventDefault();\r\n        setPatientExist(false);\r\n        try{\r\n            const data = {\r\n                \"id\":id,\r\n            }\r\n            const patient =await getPatient(data);\r\n            if(patient!=null){\r\n                setPatient(patient);\r\n                setPatientExist(true);\r\n            }\r\n        }\r\n        catch(error){\r\n            setError('Error Signing up with email and password');\r\n        }\r\n        setId(\"\");\r\n\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <Drawer\r\n                variant=\"permanent\"\r\n            >\r\n                <div className={classes.toolbarIcon}>\r\n                    <IconButton >\r\n                        <ChevronLeftIcon />\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                <div>\r\n                    <ListItem button onClick = {(event) => {\r\n                        onclickMethodTabs(event,'/')}}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <SecurityIcon/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Patients\"/>\r\n                    </ListItem>\r\n\r\n                    <ListItem button onClick = {(event) => {\r\n                        onclickMethodTabs(event,'physicians')}}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <SecurityIcon/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Physicians\"/>\r\n                    </ListItem>\r\n\r\n                    <ListItem button onClick = {(event) => {\r\n                        onclickMethodTabs(event,'visits')}}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <SettingsIcon/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Visits\"/>\r\n                    </ListItem>\r\n                </div>\r\n                <Divider />\r\n            </Drawer>\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <form className={classes.form} noValidate>\r\n                    <Grid container spacing={2}>\r\n                        <Typography component=\"h1\" variant=\"h4\" color=\"inherit\" gutterBottom>\r\n                           Find Patient\r\n                        </Typography>\r\n                        <Grid item xs={12} >\r\n                            <TextField\r\n                                autoComplete=\"id\"\r\n                                name=\"id\"\r\n                                value={id}\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"id\"\r\n                                label=\"ID\"\r\n                                autoFocus\r\n                                onChange={event => onChangeHandler(event)}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit} onClick={event => {\r\n                            buttonOnclickMethod(event);\r\n                        }}\r\n                        >\r\n                            FIND\r\n                        </Button>\r\n                        <Grid item xs={12} sm={20}>\r\n                            <div className = \"md:pl-4\">\r\n                                {patientExist &&\r\n                                    <p className={classes.form}>Patient Id : {patient.id}</p>\r\n                                }\r\n                                {patientExist &&\r\n                                    <p className={classes.form}>Name : {patient.name}</p>\r\n                                }\r\n                                {patientExist &&\r\n                                    <p className={classes.form}>Age : {patient.age}</p>\r\n                                }\r\n                                {patientExist &&\r\n                                    <p className={classes.form}>Gender : {patient.gender}</p>\r\n                                }\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </form>\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\nfunction getNavigationTabs(tab) {\r\n    navigate(tab);\r\n}\r\nfunction getPatient(pdata) {\r\n    console.log(\"Get Patient by Id : \",pdata.id);\r\n    return fetch(backendUrl+'patients/patient/patientId/'+pdata.id)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            if(data !=null  ){\r\n                console.log(data.id);\r\n                return data;\r\n\r\n            }\r\n\r\n        });\r\n\r\n}\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    title: {\r\n        flexGrow: 2,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingLeft: theme.spacing(2),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 500,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(2),\r\n    },\r\n\r\n}));\r\n\r\nexport default Profile;","C:\\play_area\\ClinicApplication\\clinic-app\\src\\components\\physicians\\PhysicianProfile.js",["57"],"import React,{ useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport SecurityIcon from \"@material-ui/icons/Security\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport {navigate} from \"@reach/router\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {backendUrl} from \"../Constants\";\r\n\r\n\r\n\r\nconst PhysicianProfile = props => {\r\n\r\n    const classes = useStyles();\r\n    const [id, setId] = useState('');\r\n    const [physician, setPhysician] = useState(undefined);\r\n    const [physicianExist, setPhysicianExist] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const onChangeHandler = event => {\r\n        const { name, value } = event.currentTarget;\r\n        if (name === \"id\") {\r\n            setId(value);\r\n        }\r\n    };\r\n    const onclickMethodTabs = (event,tab) => {\r\n        console.log(\"Navigating to\"+tab)\r\n        event.preventDefault();\r\n        getNavigationTabs(tab);\r\n\r\n    };\r\n\r\n    const buttonOnclickMethod = async (event) => {\r\n        event.preventDefault();\r\n        setPhysicianExist(false);\r\n        try{\r\n            const data = {\r\n                \"id\":id,\r\n            }\r\n            const physician =await getPhysician(data);\r\n            if(physician!=null){\r\n                setPhysician(physician);\r\n                setPhysicianExist(true);\r\n            }\r\n        }\r\n        catch(error){\r\n            setError('Error Signing up with email and password');\r\n        }\r\n        setId(\"\");\r\n\r\n    };\r\n\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <Drawer\r\n                variant=\"permanent\"\r\n            >\r\n                <div className={classes.toolbarIcon}>\r\n                    <IconButton >\r\n                        <ChevronLeftIcon />\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                <div>\r\n                    <ListItem button onClick = {(event) => {\r\n                        onclickMethodTabs(event,'/')}}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <SecurityIcon/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Patients\"/>\r\n                    </ListItem>\r\n\r\n                    <ListItem button onClick = {(event) => {\r\n                        onclickMethodTabs(event,'physicians')}}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <SecurityIcon/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Physicians\"/>\r\n                    </ListItem>\r\n\r\n                    <ListItem button onClick = {(event) => {\r\n                        onclickMethodTabs(event,'visits')}}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <SettingsIcon/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Visits\"/>\r\n                    </ListItem>\r\n                </div>\r\n                <Divider />\r\n            </Drawer>\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <form className={classes.form} noValidate>\r\n                    <Grid container spacing={2}>\r\n                        <Typography component=\"h1\" variant=\"h4\" color=\"inherit\" gutterBottom>\r\n                           Find Physician\r\n                        </Typography>\r\n                        <Grid item xs={12} >\r\n                            <TextField\r\n                                autoComplete=\"id\"\r\n                                name=\"id\"\r\n                                value={id}\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"id\"\r\n                                label=\"ID\"\r\n                                autoFocus\r\n                                onChange={event => onChangeHandler(event)}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit} onClick={event => {\r\n                            buttonOnclickMethod(event);\r\n                        }}\r\n                        >\r\n                            FIND\r\n                        </Button>\r\n                        <Grid item xs={12} sm={20}>\r\n                            <div className = \"md:pl-4\">\r\n                                {physicianExist &&\r\n                                    <p className={classes.form}>Physician Id : {physician.id}</p>\r\n                                }\r\n                                {physicianExist &&\r\n                                    <p className={classes.form}>Name : {physician.name}</p>\r\n                                }\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </form>\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\nfunction getNavigationTabs(tab) {\r\n    navigate(tab);\r\n}\r\nfunction getPhysician(pdata) {\r\n    console.log(\"Get Physician by Id : \",pdata.id);\r\n    return fetch(backendUrl+'physicians/physician/physicianId/'+pdata.id)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            if(data !=null  ){\r\n                console.log(data.id);\r\n                return data;\r\n\r\n            }\r\n\r\n        });\r\n\r\n}\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    title: {\r\n        flexGrow: 2,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingLeft: theme.spacing(2),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 500,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(2),\r\n    },\r\n\r\n}));\r\n\r\nexport default PhysicianProfile;","C:\\play_area\\ClinicApplication\\clinic-app\\src\\components\\physicians\\Physicians.js",["58"],"C:\\play_area\\ClinicApplication\\clinic-app\\src\\components\\visits\\VisitProfile.js",["59","60"],"import React,{ useState ,useEffect} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport SecurityIcon from \"@material-ui/icons/Security\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport {navigate} from \"@reach/router\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {backendUrl} from \"../Constants\";\r\n\r\n\r\n\r\nconst VisitProfile = props => {\r\n\r\n    const classes = useStyles();\r\n    const [id, setId] = useState(\"\");\r\n    const [visit, setVisit] = useState(null);\r\n    const [visitExist, setVisitExist] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const onChangeHandler = event => {\r\n        const { name, value } = event.currentTarget;\r\n        if (name === \"id\") {\r\n            setId(value);\r\n        }\r\n    };\r\n    const onclickMethodTabs = (event,tab) => {\r\n        console.log(\"Navigating to\"+tab)\r\n        event.preventDefault();\r\n        getNavigationTabs(tab);\r\n\r\n    };\r\n\r\n    const buttonOnclickMethod = async (event) => {\r\n        event.preventDefault();\r\n        setVisitExist(false);\r\n        try{\r\n            const data = {\r\n                \"id\":id,\r\n            }\r\n            const visit =await getVisit(data);\r\n            if(visit!=null){\r\n                setVisit(visit);\r\n                setVisitExist(true);\r\n            }\r\n        }\r\n        catch(error){\r\n            setError('Error Signing up with email and password');\r\n        }\r\n        setId(\"\");\r\n\r\n    };\r\n\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <Drawer\r\n                variant=\"permanent\"\r\n            >\r\n                <div className={classes.toolbarIcon}>\r\n                    <IconButton >\r\n                        <ChevronLeftIcon />\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                <div>\r\n                    <ListItem button onClick = {(event) => {\r\n                        onclickMethodTabs(event,'/')}}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <SecurityIcon/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Patients\"/>\r\n                    </ListItem>\r\n\r\n                    <ListItem button onClick = {(event) => {\r\n                        onclickMethodTabs(event,'physicians')}}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <SecurityIcon/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Physicians\"/>\r\n                    </ListItem>\r\n\r\n                    <ListItem button onClick = {(event) => {\r\n                        onclickMethodTabs(event,'visits')}}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <SettingsIcon/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Visits\"/>\r\n                    </ListItem>\r\n                </div>\r\n                <Divider />\r\n            </Drawer>\r\n\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <form className={classes.form} noValidate>\r\n                    <Grid container spacing={2}>\r\n                        <Typography component=\"h1\" variant=\"h4\" color=\"inherit\" gutterBottom>\r\n                           Find Visit\r\n                        </Typography>\r\n                        <Grid item xs={12} >\r\n                            <TextField\r\n                                autoComplete=\"id\"\r\n                                name=\"id\"\r\n                                value={id}\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"id\"\r\n                                label=\"ID\"\r\n                                autoFocus\r\n                                onChange={event => onChangeHandler(event)}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit} onClick={event => {\r\n                            buttonOnclickMethod(event);\r\n                        }}\r\n                        >\r\n                            FIND\r\n                        </Button>\r\n                        <Grid item xs={12} sm={20}>\r\n                            <div className = \"md:pl-4\">\r\n                                {visitExist &&\r\n                                    <p className={classes.form}>Visit Id : {visit.id}</p>\r\n                                }\r\n                                {visitExist &&\r\n                                    <p className={classes.form}>Visit Date : {visit.visitDatetime}</p>\r\n                                }\r\n                                {visitExist &&\r\n                                    <p className={classes.form}>Patient Id : {visit.patientId}</p>\r\n                                }\r\n                                {visitExist &&\r\n                                    <p className={classes.form}>Physician Id : {visit.physicianId}</p>\r\n                                }\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </form>\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\nfunction getNavigationTabs(tab) {\r\n    navigate(tab);\r\n}\r\nfunction getVisit(pdata) {\r\n    console.log(\"Get Visit by Id : \",pdata.id);\r\n    return fetch(backendUrl+'visit/visitId/'+pdata.id)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            if(data !=null  ){\r\n                console.log(data.id);\r\n                return data;\r\n\r\n            }\r\n\r\n        });\r\n\r\n}\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    title: {\r\n        flexGrow: 2,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingLeft: theme.spacing(2),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 500,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(2),\r\n    },\r\n\r\n}));\r\n\r\nexport default VisitProfile;","C:\\play_area\\ClinicApplication\\clinic-app\\src\\components\\visits\\Visits.js",["61"],"import React, {useEffect, useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport SecurityIcon from \"@material-ui/icons/Security\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport {navigate} from \"@reach/router\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Select from '@material-ui/core/Select';\r\nimport {FormControl} from '@material-ui/core';\r\nimport {backendUrl} from \"../Constants\";\r\n\r\n\r\n\r\n\r\nconst Visits = props => {\r\n\r\n    const classes = useStyles();\r\n    const [id, setId] = useState(\"\");\r\n    const [visitDate,setVisitDate] = useState(\"\");\r\n    const [selectedPatient, setSelectedPatient] = useState(undefined);\r\n    const [patientsList, setPatientsList] = useState([]);\r\n    const [selectedPhysician, setSelectedPhysician] = useState(undefined);\r\n    const [physiciansList, setPhysiciansList] = useState([]);\r\n    const [reason, setReason] = useState(\"\");\r\n    const [endOfProcess, setEndOfProcess] = useState(false);\r\n    const [loading, setLoading] = React.useState(false);\r\n    const [status, setStatus] = useState(\"\");\r\n    const [error, setError] = useState(null);\r\n    const [idError, setIdError] = useState('');\r\n    const [visitDateError, setVisitDateError] = useState('');\r\n\r\n\r\n    const onChangeHandler = event => {\r\n        const { name, value } = event.target;\r\n        if (name === \"id\") {\r\n            setId(value);\r\n        }else if (name === \"visitDate\") {\r\n            setVisitDate(value);\r\n        }else if (name === \"patient\") {\r\n            setSelectedPatient(value);\r\n        }else if (name === \"physician\") {\r\n            setSelectedPhysician(value);\r\n        }else if (name === \"reason\") {\r\n            setReason(value);\r\n        }\r\n    };\r\n\r\n    const onclickMethodTabs = (event,tab) => {\r\n        console.log(\"Navigating to\"+tab)\r\n        event.preventDefault();\r\n        getNavigationTabs(tab);\r\n\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetch(backendUrl+\"physicians/\")\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                setPhysiciansList(data);\r\n            });\r\n\r\n    }, );\r\n\r\n    useEffect(() => {\r\n        fetch(backendUrl+\"patients/\")\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                setPatientsList(data);\r\n            });\r\n\r\n    }, );\r\n\r\n\r\n    const buttonOnclickMethod = async (event) => {\r\n        setLoading(true);\r\n        setIdError('');\r\n        setVisitDateError('');\r\n        setStatus('');\r\n        event.preventDefault();\r\n        if (id === '') {\r\n            setIdError('Id is Required.');\r\n            if (visitDate === '')\r\n                setVisitDateError('Visit Date is Required.');\r\n        }\r\n        else if (visitDate === '') {\r\n            setVisitDateError('Visit Date is Required.');\r\n        }\r\n        else  {\r\n            try {\r\n                const data = {\r\n                    \"id\": id,\r\n                    \"visitDatetime\": visitDate,\r\n                    \"patientId\": selectedPatient.id,\r\n                    \"physicianId\": selectedPhysician.id,\r\n                    \"reason\": reason\r\n                }\r\n                const visit = await createVisit(data);\r\n                setEndOfProcess(true);\r\n                setLoading(false);\r\n                if (visit != null) {\r\n                    if (visit.id != null)\r\n                        setStatus('Visit is created Successfully');\r\n                    else\r\n                        setStatus(visit.description);\r\n                } else\r\n                    setStatus('Something happened wrong');\r\n\r\n            } catch (error) {\r\n                setError('Error in Creating Visit');\r\n                setStatus(error);\r\n            }\r\n        }\r\n        setLoading(false);\r\n        setId(\"\");\r\n        setVisitDate(\"\");\r\n        setSelectedPatient(undefined);\r\n        setSelectedPhysician(undefined);\r\n        setReason(\"\");\r\n    };\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <Drawer\r\n                variant=\"permanent\">\r\n                <div className={classes.toolbarIcon}>\r\n                    <IconButton >\r\n                        <ChevronLeftIcon />\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                <div>\r\n                    <ListItem button onClick = {(event) => {\r\n                        onclickMethodTabs(event,'/')}}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <SecurityIcon/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Patients\"/>\r\n                    </ListItem>\r\n\r\n                    <ListItem button onClick = {(event) => {\r\n                        onclickMethodTabs(event,'physicians')}}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <SecurityIcon/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Physicians\"/>\r\n                    </ListItem>\r\n\r\n                    <ListItem>\r\n                        <ListItemIcon>\r\n                            <SettingsIcon/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Visits\"/>\r\n                    </ListItem>\r\n                </div>\r\n                <Divider />\r\n\r\n\r\n            </Drawer>\r\n                <Container component=\"main\" maxWidth=\"xs\">\r\n                    <form className={classes.form} noValidate>\r\n                        <Grid container spacing={2}>\r\n                            <Typography component=\"h1\" variant=\"h4\" color=\"inherit\" gutterBottom>\r\n                                Visit Creation\r\n                            </Typography>\r\n                            <Grid item xs={12} >\r\n                                <TextField\r\n                                    autoComplete=\"id\"\r\n                                    name=\"id\"\r\n                                    value={id}\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"id\"\r\n                                    label=\"ID\"\r\n                                    autoFocus\r\n                                    helperText={idError}\r\n                                    error = {idError === '' ?false:true}\r\n                                    onChange={event => onChangeHandler(event)}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    id=\"visitDate\"\r\n                                    name=\"visitDate\"\r\n                                    value={visitDate}\r\n                                    label=\"Visit Date\"\r\n                                    type=\"datetime-local\"\r\n                                    defaultValue=\"yyyy-mm-ddTHH:MM\"\r\n                                    helperText={visitDateError}\r\n                                    error = {visitDateError === '' ?false:true}\r\n                                    className={classes.textField}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    onChange={event => onChangeHandler(event)}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} >\r\n                                <FormControl className={classes.formControl}  >\r\n                                    <InputLabel shrink htmlFor=\"age-native-label-placeholder\">\r\n                                        Patient\r\n                                    </InputLabel>\r\n                                    <Select\r\n                                        onChange={(event) => onChangeHandler(event)}\r\n                                        inputProps={{\r\n                                            name: 'patient',\r\n                                            id: 'age-native-label-placeholder',\r\n                                        }}\r\n                                        renderValue={()=>{\r\n                                            return (<text>{selectedPatient ? selectedPatient.name : \"\"}</text>)\r\n                                        }}\r\n                                    >{patientsList.map(obj => (\r\n                                        <option\r\n                                            key={obj}\r\n                                            value={obj} >\r\n                                            {obj.name}</option>\r\n                                    )) }\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={12} >\r\n                                <FormControl className={classes.formControl}  >\r\n                                    <InputLabel shrink htmlFor=\"age-native-label-placeholder\">\r\n                                        Physician\r\n                                    </InputLabel>\r\n                                    <Select\r\n                                        onChange={(event) => onChangeHandler(event)}\r\n                                        inputProps={{\r\n                                            name: 'physician',\r\n                                            id: 'age-native-label-placeholder',\r\n                                        }}\r\n                                        renderValue={()=>{\r\n                                            return (<text>{selectedPhysician ? selectedPhysician.name : \"\"}</text>)\r\n                                        }}\r\n                                    >{physiciansList.map(obj => (\r\n                                        <option\r\n                                            key={obj}\r\n                                            value={obj} >\r\n                                            {obj.name}</option>\r\n                                    )) }\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={12} >\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"reason\"\r\n                                    label=\"Reason\"\r\n                                    name=\"reason\"\r\n                                    value={reason}\r\n                                    autoComplete=\"reason\"\r\n                                    onChange={event => onChangeHandler(event)}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Button\r\n                                disabled = {loading}\r\n                                type=\"submit\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.submit} onClick={event => {\r\n                                buttonOnclickMethod(event);\r\n                            }}\r\n                            >\r\n                                SUBMIT\r\n                            </Button>\r\n                            <Grid container justify=\"flex-end\">\r\n                                <Grid item>\r\n                                    <Link href=\"visit_profile\" variant=\"body2\">\r\n                                        Already have an account? Find Visit >>>\r\n                                    </Link>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={100}>\r\n                                <div className = \"md:pl-4\">\r\n                                    {endOfProcess &&\r\n                                    <p className={classes.form}>{status}</p>\r\n                                    }\r\n\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </Container>\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\nfunction getNavigationTabs(tab) {\r\n    navigate(tab);\r\n}\r\nfunction createVisit(pData) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(pData)\r\n    };\r\n    return fetch(backendUrl+'visit/', requestOptions)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            if(data !=null){\r\n                console.log(data.description);\r\n                return data;\r\n            }else {\r\n                console.log('Something happened wrong');\r\n            }\r\n        });\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    title: {\r\n        flexGrow: 2,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingLeft: theme.spacing(2),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 500,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    formControl:{\r\n        padding: theme.spacing(1),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n        paddingBottom: theme.spacing(2),\r\n        paddingTop: theme.spacing(1),\r\n    },\r\n\r\n}));\r\n\r\nexport default Visits;",{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":37,"column":12,"nodeType":"68","messageId":"69","endLine":37,"endColumn":17},{"ruleId":"66","severity":1,"message":"70","line":2,"column":8,"nodeType":"68","messageId":"69","endLine":2,"endColumn":12},{"ruleId":"66","severity":1,"message":"71","line":20,"column":8,"nodeType":"68","messageId":"69","endLine":20,"endColumn":15},{"ruleId":"66","severity":1,"message":"67","line":31,"column":12,"nodeType":"68","messageId":"69","endLine":31,"endColumn":17},{"ruleId":"66","severity":1,"message":"67","line":29,"column":12,"nodeType":"68","messageId":"69","endLine":29,"endColumn":17},{"ruleId":"66","severity":1,"message":"67","line":32,"column":12,"nodeType":"68","messageId":"69","endLine":32,"endColumn":17},{"ruleId":"66","severity":1,"message":"72","line":1,"column":26,"nodeType":"68","messageId":"69","endLine":1,"endColumn":35},{"ruleId":"66","severity":1,"message":"67","line":29,"column":12,"nodeType":"68","messageId":"69","endLine":29,"endColumn":17},{"ruleId":"66","severity":1,"message":"67","line":41,"column":12,"nodeType":"68","messageId":"69","endLine":41,"endColumn":17},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'clsx' is defined but never used.","'EdiText' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]